name: Backend

on:
  push:
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"
  pull_request:
    types: [opened]
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.22"
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install gofumpt
        run: go install mvdan.cc/gofumpt@latest
      - name: Check code formatting
        run: |
          unformatted_files=$(gofumpt -l ./backend/)
          if [ -n "$unformatted_files" ]; then
            echo "Files not formatted:"
            echo "$unformatted_files"
            exit 1
          fi
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      checks: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./backend/
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: sac
        ports:
          - 5432:5432
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Dependencies
        run: cd ./backend/ && go get ./...
      - name: Increase max_connections in PostgreSQL
        run: |
          CONTAINER_ID=$(docker ps --filter "publish=5432" --format "{{.ID}}")
          docker exec $CONTAINER_ID bash -c "sed -i 's/^#* *max_connections *= *[0-9]*/max_connections = 256/' /var/lib/postgresql/data/postgresql.conf"
          docker exec $CONTAINER_ID cat /var/lib/postgresql/data/postgresql.conf | grep max_connections
      - name: Restart PostgreSQL Container
        run: docker restart $(docker ps --filter "publish=5432" --format "{{.ID}}")
      - name: Run Tests with Coverage
        run: cd ./backend/ && go test -bench=. -benchmem -race -coverprofile=coverage.txt ./...
      - name: Print Coverage
        run: cd ./backend/ && go tool cover -func=coverage.txt
