// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "David Oduneye and Garrett Ladley",
            "email": "generatesac@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "Logs in a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Logs in a user",
                "operationId": "login-user",
                "parameters": [
                    {
                        "description": "User Body",
                        "name": "userBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "failed to parse body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "failed to login user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "get": {
                "description": "Logs out a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Logs out a user",
                "operationId": "logout-user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "failed to logout user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/me": {
            "get": {
                "description": "Returns the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Gets the current user",
                "operationId": "get-current-user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "failed to get current user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "get": {
                "description": "Refreshes a user's access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Refreshes a user's access token",
                "operationId": "refresh-user",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "failed to refresh access token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/category/": {
            "get": {
                "description": "Retrieves all existing categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Retrieve all categories",
                "operationId": "get-categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    },
                    "500": {
                        "description": "unable to retrieve categories",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a category that is used to group tags",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Create a category",
                "operationId": "create-category",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "category with that name already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to create category",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/category/{id}": {
            "get": {
                "description": "Retrieve a category by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Retrieve a category",
                "operationId": "get-category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "failed to validate id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "faied to find category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to retrieve category",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a category by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Delete a category",
                "operationId": "delete-category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "failed to validate id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "failed to find category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to delete category",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "category"
                ],
                "summary": "Updates a category",
                "operationId": "update-category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "failed to validate id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "failed to find category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to update category",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/tags/": {
            "post": {
                "description": "Creates a tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Creates a tag",
                "operationId": "create-tag",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    },
                    "400": {
                        "description": "failed to validate the data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to create tag",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/tags/{id}": {
            "get": {
                "description": "Returns a tag",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Gets a tag",
                "operationId": "get-tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    },
                    "400": {
                        "description": "failed to validate id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "faied to find tag",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to retrieve tag",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a tag",
                "tags": [
                    "tag"
                ],
                "summary": "Deletes a tag",
                "operationId": "delete-tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "failed to validate id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "tag not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to delete tag",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Updates a tag",
                "operationId": "update-tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    },
                    "400": {
                        "description": "failed to validate the data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "failed to find tag",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to update tag",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/users/": {
            "get": {
                "description": "Returns all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Gets all users",
                "operationId": "get-all-users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "failed to get all users",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Creates a User",
                "operationId": "create-user",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "failed to create user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "description": "Returns a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Gets a user",
                "operationId": "get-user-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "failed to validate id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to get user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Returns nil",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Deletes the given userID",
                "operationId": "delete-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to get all users",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Updates a user",
                "operationId": "update-user-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "failed to validate id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to hash password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Category": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-09-20T16:34:50Z"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-09-20T16:34:50Z"
                }
            }
        },
        "models.College": {
            "type": "string",
            "enum": [
                "CAMD",
                "DMSB",
                "KCCS",
                "CE",
                "BCHS",
                "SL",
                "CPS",
                "CS",
                "CSSH"
            ],
            "x-enum-comments": {
                "BCHS": "Bouvé College of Health Sciences",
                "CAMD": "College of Arts, Media and Design",
                "CE": "College of Engineering",
                "CPS": "College of Professional Studies",
                "CS": "College of Science",
                "CSSH": "College of Social Sciences and Humanities",
                "DMSB": "D'Amore-McKim School of Business",
                "KCCS": "Khoury College of Computer Sciences",
                "SL": "School of Law"
            },
            "x-enum-varnames": [
                "CAMD",
                "DMSB",
                "KCCS",
                "CE",
                "BCHS",
                "SL",
                "CPS",
                "CS",
                "CSSH"
            ]
        },
        "models.Tag": {
            "type": "object",
            "required": [
                "category_id",
                "name"
            ],
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-09-20T16:34:50Z"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-09-20T16:34:50Z"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "college",
                "email",
                "first_name",
                "last_name",
                "nuid",
                "role",
                "year"
            ],
            "properties": {
                "college": {
                    "maxLength": 255,
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.College"
                        }
                    ]
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-09-20T16:34:50Z"
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 255
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 255
                },
                "nuid": {
                    "type": "string"
                },
                "role": {
                    "enum": [
                        "super",
                        "student"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-09-20T16:34:50Z"
                },
                "year": {
                    "maximum": 6,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Year"
                        }
                    ]
                }
            }
        },
        "models.UserRole": {
            "type": "string",
            "enum": [
                "super",
                "student"
            ],
            "x-enum-varnames": [
                "Super",
                "Student"
            ]
        },
        "models.Year": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "x-enum-varnames": [
                "First",
                "Second",
                "Third",
                "Fourth",
                "Fifth",
                "Graduate"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "127.0.0.1:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "SAC API",
	Description:      "Backend Server for SAC App",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
